<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-02-07T15:47:44+00:00</updated><id>http://localhost:4000/</id><title type="html">edjw.github.io</title><subtitle>My blog</subtitle><entry><title type="html">How often is 1st January a Monday?</title><link href="http://localhost:4000/2018/01/02/how-often-is-1st-january-a-monday.html" rel="alternate" type="text/html" title="How often is 1st January a Monday?" /><published>2018-01-02T00:00:00+00:00</published><updated>2018-01-02T00:00:00+00:00</updated><id>http://localhost:4000/2018/01/02/how-often-is-1st-january-a-monday</id><content type="html" xml:base="http://localhost:4000/2018/01/02/how-often-is-1st-january-a-monday.html">**Answer...less often than every other day except Saturday. I have no idea why.**

Yesterday, 1st January 2018 was a Monday. Monday is the first day of the week. Some people think it's Sunday. I don't understand those people.

Anyway, it made me wonder...How often has the first day of the week been the first day of the year? And how many years will we have to wait until the first day of the year is a Monday again?

I wrote some [bad, repetitive Python code](#that-bad-repetitive-python) (also [on Github)](https://github.com/edjw/how-often-is-1st-january-a-monday/) to work this out. I also made some bad, repetitive use of the [Plotly Python Library](https://plot.ly/python/) to make some bar charts.

For some reason, 1st January doesn't spread evenly among all the days of the week. One in 7 is 14.29%. 1st January is a Monday or Saturday 14% of the time; Wednesday or Thursday 14.25% of the time; and Tuesday, Friday or Sunday 14.5% of the time.

# From the year 1 AD to 2018

| Day of week | Times 1st Jan has been X day | Avg years to wait |
| --- | :---: | :---: |
| Monday | 283 | 7.15 |
| Tuesday | 293 | 6.89 |
| Wednesday | 287 | 7.03 |
| Thursday | 288 | 7.01 |
| Friday | 292 | 6.89 |
| Saturday | 282 | 7.14 |
| Sunday | 293 | 6.89 |

These are the number of times 1st January has fallen on X day of the week since the year 1 AD (the earliest year Python can work with in its standard library). It also shows the mean average number of years we have to wait from 1st January being X day of the week until the next time it happens.

There are three groupings of frequency of 1st January being X day of the week.

1. **Tuesdays (293 since the year 1 AD), Fridays (292) and Sundays (293) -- 14.51%**
2. **Wednesdays (287) and Thursdays (288)**
3. **Mondays (283) and Saturdays (282)**

Somebody (else) probably has an explanation for why this happens.

**The next time 1st January is a Monday is 2024 (in 6 years). The previous time was 2007 (11 years ago).**

![](/uploads/2018/01/02/first_jan_mon_2018.png)

![](/uploads/2018/01/02/mean_wait_2018.png)

# From the year 1 AD to 9999

To test that a bit further I tried it from 1AD to the year 9999 as well. (9999 is the maximum year Python can work with in its standard library.) The results are as good as exactly the same.

| Day of week | Times 1st Jan has been X day | Avg years to wait |
| --- | :---: | :---: |
| Monday | 1400 | 7.14 |
| Tuesday | 1450 | 6.89 |
| Wednesday | 1425 | 7.02 |
| Thursday | 1425 | 7.02 |
| Friday | 1450 | 6.89 |
| Saturday | 1399 | 7.15 |
| Sunday | 1450 | 6.89 |

![](/uploads/2018/01/02/first_jan_mon_9999.png)

![](/uploads/2018/01/02/mean_wait_9999.png)

And just to check that there's no change over time in how often a 1st January is X day of the week...

![](/uploads/2018/01/02/first_jan_over_time_9999.png)

There's no change over time in the rate of X day of the week being 1st January. (The days in the original three groupings overlap.)

# That bad, repetitive Python

In case you want to work with this here's that bad, repetitive code I used. It's [also on Github.](https://github.com/edjw/how-often-is-1st-january-a-monday/)

    from datetime import datetime
    from statistics import mean
    import plotly
    import plotly.graph_objs as go
    
    # year = int(datetime.today().strftime(&quot;%Y&quot;))  # 2018 at the moment
    year = 9999  # the latest year you can use
    
    
    def get_first_jan_weekdays(year):
    
        mondays = []  # &quot;2018, 2007, 2001&quot;
        tuesdays = []
        wednesdays = []
        thursdays = []
        fridays = []
        saturdays = []
        sundays = []
    
        while year &gt;= 1:
    
            day_of_week_first_jan = datetime(year, 1, 1).strftime(&quot;%A&quot;)
    
            if day_of_week_first_jan == 'Monday':
                mondays.append(year)
            elif day_of_week_first_jan == 'Tuesday':
                tuesdays.append(year)
            elif day_of_week_first_jan == 'Wednesday':
                wednesdays.append(year)
            elif day_of_week_first_jan == 'Thursday':
                thursdays.append(year)
            elif day_of_week_first_jan == 'Friday':
                fridays.append(year)
            elif day_of_week_first_jan == 'Saturday':
                saturdays.append(year)
            elif day_of_week_first_jan == 'Sunday':
                sundays.append(year)
    
            year -= 1
    
        return mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays
    
    
    def first_jans_over_time(mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays):
        mondays_over_time = sorted(mondays)
        tuesdays_over_time = sorted(tuesdays)
        wednesdays_over_time = sorted(wednesdays)
        thursdays_over_time = sorted(thursdays)
        fridays_over_time = sorted(fridays)
        saturdays_over_time = sorted(saturdays)
        sundays_over_time = sorted(sundays)
    
        return mondays_over_time, tuesdays_over_time, wednesdays_over_time, thursdays_over_time, fridays_over_time, saturdays_over_time, sundays_over_time
    
    
    def get_number_of_first_jan_weekdays(mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays):
        total_mondays = len(mondays)
        total_tuesdays = len(tuesdays)
        total_wednesdays = len(wednesdays)
        total_thursdays = len(thursdays)
        total_fridays = len(fridays)
        total_saturdays = len(saturdays)
        total_sundays = len(sundays)
    
        return total_mondays, total_tuesdays, total_wednesdays, total_thursdays, total_fridays, total_saturdays, total_sundays
    
    
    def get_avg_wait_between_years(mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays):
        # 1st num minus 2nd num
        mon_waits = [s - t for s, t in zip(mondays, mondays[1:])]
        # mean difference rounded to 2 decimal places
        mon_avg_wait = round(mean(mon_waits), 2)
    
        tues_waits = [s - t for s, t in zip(tuesdays, tuesdays[1:])]
        tues_avg_wait = round(mean(tues_waits), 2)
    
        wed_waits = [s - t for s, t in zip(wednesdays, wednesdays[1:])]
        wed_avg_wait = round(mean(wed_waits), 2)
    
        thurs_waits = [s - t for s, t in zip(thursdays, thursdays[1:])]
        thurs_avg_wait = round(mean(thurs_waits), 2)
    
        fri_waits = [s - t for s, t in zip(fridays, fridays[1:])]
        fri_avg_wait = round(mean(fri_waits), 2)
    
        sat_waits = [s - t for s, t in zip(saturdays, saturdays[1:])]
        sat_avg_wait = round(mean(sat_waits), 2)
    
        sun_waits = [s - t for s, t in zip(sundays, sundays[1:])]
        sun_avg_wait = round(mean(sun_waits), 2)
    
        return mon_avg_wait, tues_avg_wait, wed_avg_wait, thurs_avg_wait, fri_avg_wait, sat_avg_wait, sun_avg_wait
    
    
    def generate_first_jan_over_time_line_chart(*args):
    
        trace0 = go.Scatter(
            x=mondays_over_time,
            name='Mondays',
            line=dict(
                color=('red'),
                width=3)
            )
    
        trace1 = go.Scatter(
            x=tuesdays_over_time,
            name='Tuesdays',
            line=dict(
            color=('blue'),
            width=3)
        )
    
        trace2 = go.Scatter(
            x=wednesdays_over_time,
            name='Wednesdays',
            line=dict(
            color=('yellow'),
            width=3)
        )
    
        trace3 = go.Scatter(
            x=thursdays_over_time,
            name='Thursdays',
            line=dict(
            color=('green'),
            width=3)
        )
    
        trace4 = go.Scatter(
            x=fridays_over_time,
            name='Fridays',
            line=dict(
            color=('black'),
            width=3)
        )
    
        trace5 = go.Scatter(
            x=saturdays_over_time,
            name='Saturdays',
            line=dict(
            color=('pink'),
            width=3)
        )
    
        trace6 = go.Scatter(
            x=sundays_over_time,
            name='Sundays',
            line=dict(
            color=('orange'),
            width=3)
        )
    
    
        data = [trace0, trace1, trace2, trace3, trace4, trace5, trace6]
    
        layout = go.Layout(
            title=&quot;Number of times 1st Jan is X day over time&quot;,
    
            xaxis=dict(
                title=&quot;Instance of X day as 1st January&quot;,
                range=[0, 10001]
    
            ),
            yaxis=dict(
                title=&quot;Year from 1 AD to 9999&quot;,
                range=[0, 1400]
    
            ),
    
        )
    
        plotly.offline.plot({&quot;data&quot;: data, &quot;layout&quot;: layout})
    
    
    def generate_totals_bar_chart(*args):
        y_axis_data = []
        for arg in args:
            y_axis_data.append(arg)
    
        data = [go.Bar(
                x=[&quot;Mondays&quot;, &quot;Tuesdays&quot;, &quot;Wednesdays&quot;,
                    &quot;Thursday&quot;, &quot;Fridays&quot;, &quot;Saturdays&quot;, &quot;Sundays&quot;],
                y=y_axis_data
                )]
    
        layout = go.Layout(
            title=&quot;How often is 1st January a Monday? From the year 1 to 9999&quot;,
    
            xaxis=dict(
                title=&quot;Days of the week&quot;
            ),
            yaxis=dict(
                title=&quot;Number of times 1st January has been X day&quot;,
                range=[1350, 1460]
            ),
    
        )
    
        plotly.offline.plot({&quot;data&quot;: data, &quot;layout&quot;: layout})
    
    
    def generate_avgs_barchart(*args):
        y_axis_data = []
        for arg in args:
            y_axis_data.append(arg)
    
        data = [go.Bar(
                x=[&quot;Mondays&quot;, &quot;Tuesdays&quot;, &quot;Wednesdays&quot;,
                    &quot;Thursday&quot;, &quot;Fridays&quot;, &quot;Saturdays&quot;, &quot;Sundays&quot;],
                y=y_axis_data
                )]
    
        layout = go.Layout(
            title=&quot;How many years until it's a Monday again? From the year 1 to 9999&quot;,
    
            xaxis=dict(
                title=&quot;Days of the week&quot;
            ),
            yaxis=dict(
                title=&quot;Average (mean) years to wait&quot;,
                range=[6.5, 7.5]
            ),
    
        )
    
        plotly.offline.plot({&quot;data&quot;: data, &quot;layout&quot;: layout})
    
    
    mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays = get_first_jan_weekdays(
        year)
    
    total_mondays, total_tuesdays, total_wednesdays, total_thursdays, total_fridays, total_saturdays, total_sundays = get_number_of_first_jan_weekdays(
        mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays)
    
    mon_avg_wait, tues_avg_wait, wed_avg_wait, thurs_avg_wait, fri_avg_wait, sat_avg_wait, sun_avg_wait = get_avg_wait_between_years(
        mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays)
    
    mondays_over_time, tuesdays_over_time, wednesdays_over_time, thursdays_over_time, fridays_over_time, saturdays_over_time, sundays_over_time = first_jans_over_time(
        mondays, tuesdays, wednesdays, thursdays, fridays, saturdays, sundays)
    
    # generate_totals_bar_chart(total_mondays, total_tuesdays, total_wednesdays, total_thursdays, total_fridays, total_saturdays, total_sundays)
    
    # generate_avgs_barchart(mon_avg_wait, tues_avg_wait, wed_avg_wait, thurs_avg_wait, fri_avg_wait, sat_avg_wait, sun_avg_wait)
    
    # generate_first_jan_over_time_line_chart(mondays_over_time, tuesdays_over_time, wednesdays_over_time, thursdays_over_time, fridays_over_time, saturdays_over_time, sundays_over_time)</content><author><name></name></author><summary type="html">Answer…less often than every other day except Saturday. I have no idea why.</summary></entry><entry><title type="html">A simplistic post on remembering your country’s history</title><link href="http://localhost:4000/2017/08/16/a-simplistic-post-on-remembering-your-country-s-history.html" rel="alternate" type="text/html" title="A simplistic post on remembering your country's history" /><published>2017-08-16T18:27:30+01:00</published><updated>2017-08-16T18:27:30+01:00</updated><id>http://localhost:4000/2017/08/16/a-simplistic-post-on-remembering-your-country-s-history</id><content type="html" xml:base="http://localhost:4000/2017/08/16/a-simplistic-post-on-remembering-your-country-s-history.html">Donald Trump says that removing statues to Confederate generals is &quot;&lt;a href=&quot;http://www.politico.com/story/2017/08/15/full-text-trump-comments-white-supremacists-alt-left-transcript-241662&quot; data-vivaldi-spatnav-clickable=&quot;1&quot;&gt;changing history&lt;/a&gt;&quot;.

He's wrong.

Take Germany. They don't need statues of Hitler to remember Germany's history even though Hitler is part of German history.

They have memorials to the victims of Nazi Germany instead.

People in Germany remember Germany's history without having monuments of the people responsible for the Holocaust.

America can remember what happened before and during the Civil War without having&lt;span style=&quot;font-size: 1rem;&quot;&gt;&amp;nbsp;statues of the leaders of the Confederacy.&lt;/span&gt;

They can have memorials to victims of slavery and those who died in the Civil War instead.</content><author><name></name></author><summary type="html">Donald Trump says that removing statues to Confederate generals is “changing history”.</summary></entry><entry><title type="html">A simplistic post on quick trade agreements</title><link href="http://localhost:4000/2017/07/10/a-simplistic-post-on-quick-trade-agreements.html" rel="alternate" type="text/html" title="A simplistic post on quick trade agreements" /><published>2017-07-10T15:14:38+01:00</published><updated>2017-07-10T15:14:38+01:00</updated><id>http://localhost:4000/2017/07/10/a-simplistic-post-on-quick-trade-agreements</id><content type="html" xml:base="http://localhost:4000/2017/07/10/a-simplistic-post-on-quick-trade-agreements.html">A quick trade deal means the country with the smaller economy being forced to accept the demands of the larger economy in return for the speed of the deal.

You don't want a quick deal if you're [negotiating with the US](http://www.bbc.co.uk/news/uk-politics-40540340). Unless you're not bothered about food safety, environmental standards, rules on procurement of public services (this means NHS).

One example. [Chicken in America](http://www.salon.com/2014/05/26/chlorine_in_your_chicken_why_poultry_is_more_dangerous_than_ever_partner/) is usually [washed with chlorine](https://www.washingtonpost.com/world/europe/free-trade-with-us-europe-balks-at-chlorine-chicken-hormone-beef/2014/12/04/e9aa131c-6c3f-11e4-bafd-6598192a448d_story.html). You can't sell chlorine-washed chicken in the EU. The US chicken industry wants to sell its chicken internationally without having a separate chlorine-free production line. So the US puts something into a trade agreement with the UK that says chlorine-washed chicken is OK. The UK wants a quick agreement so says yes to that so it can improve the deal on a bigger priority like financial services.

Apply the chicken example to basically every category of goods or services.

If you're a single bloc negotiating on behalf of 28 countries you're more likely to be able to say no to stuff you really don't want and other countries are more likely to say yes to the things you do want. That's because other countries have much stronger incentives to get a deal with you so they can do more trade with you than if you're a single country alone.

File this one under things I never thought about before the referendum</content><author><name></name></author><summary type="html">A quick trade deal means the country with the smaller economy being forced to accept the demands of the larger economy in return for the speed of the deal.</summary></entry><entry><title type="html">A simplistic post on Brexit utopianism</title><link href="http://localhost:4000/2017/06/18/a-simplistic-post-on-brexit-utopianism.html" rel="alternate" type="text/html" title="A simplistic post on Brexit utopianism" /><published>2017-06-18T10:12:11+01:00</published><updated>2017-06-18T10:12:11+01:00</updated><id>http://localhost:4000/2017/06/18/a-simplistic-post-on-brexit-utopianism</id><content type="html" xml:base="http://localhost:4000/2017/06/18/a-simplistic-post-on-brexit-utopianism.html">1. This has been said many times before.

1. Brexit supporters on the right who complain that the socialist utopianism of Corbyn etc isn't pragmatic are ridiculous.

1. You can't complain about utopianism while wanting the UK to jump off the Brexit cliff hoping there will be a soft landing.

1. Brexit is not a pragmatic project.

1. Labour's position is not much better. You can't claim your manifesto is fully costed if you don't cost out the economic impact of your policy of ending freedom of movement.</content><author><name></name></author><summary type="html">This has been said many times before.</summary></entry><entry><title type="html">A simplistic post on liberalism and Christianity</title><link href="http://localhost:4000/2017/06/15/a-simplistic-post-on-liberalism-and-christianity.html" rel="alternate" type="text/html" title="A simplistic post on liberalism and Christianity" /><published>2017-06-15T01:00:00+01:00</published><updated>2017-06-15T01:00:00+01:00</updated><id>http://localhost:4000/2017/06/15/a-simplistic-post-on-liberalism-and-christianity</id><content type="html" xml:base="http://localhost:4000/2017/06/15/a-simplistic-post-on-liberalism-and-christianity.html">1. I'm a straight, Christian man who is liberal - both politically and theologically.

1. I disagree with Tim Farron's apparent view that having an abortion or gay sex is a sin

1. I also disagree with Tim Farron's comments that being a liberal leader and a &quot;faithful Christian&quot; is irreconcilable. There are lots of liberal Christians.

1. It *helps* to be a Christian who embraces people of all sexualities and is pro-choice if you want to be a liberal leader.

1. I do however think that you can hold personal views that are illiberal and still be a liberal politician so long as you don't impose your personal views on others.

1. There is nothing in Tim Farron's record to suggest he has tried to impose his personal views on others.

1. You might say that you want to know your political leaders say what they believe in. Fair enough.

1. Jeremy Corbyn opposes nuclear weapons but is (now) happy to say he will promote party policy which is to renew Trident. Is there a difference between this and Farron?

1. What about Theresa May? Does she personally believe everything she promotes? Does every journalist? Is this only an issue because Tim Farron is a *liberal* politician?

1. I saw someone on Twitter ask...Where do you draw the line on personal views that you'd be OK with so long as they didn't act on them? Would you be OK with a Holocaust denier? Answer...Don't know.

1. But Tim Farron has consistently voted for liberal legislation on abortion and gay rights. This would be *a bit* like a Holocaust denier consistently voting to fund museums about the Holocaust. Stress on *a bit like*. It's not actually the same. Obviously.

1. I would probably react to this differently if I was gay and I need to think about this more.

1. Reading this [Twitter thread](https://twitter.com/huwlemmey/status/875254164909109248) by Huw Lemmey is the closest I've got to changing my mind on this.</content><author><name></name></author><summary type="html">I’m a straight, Christian man who is liberal - both politically and theologically.</summary></entry></feed>